<!DOCTYPE html>
<html lang="en">
<html>
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>NatGuess</title>
  <link href="/css/bootstrap.min.css" rel="stylesheet">
  <link href="/css/chat.css" rel="stylesheet">
  <link href="/css/ripples.css" rel="stylesheet">
  <link href="/css/material-wfont.min.css" rel="stylesheet">
  <link href="/css/jquery-ui.css" rel="stylesheet">
  <link href="/css/emojione.min.css" rel="stylesheet" type="text/css"/>
  <link href="https://fonts.googleapis.com/css?family=Lora:400,700,400italic,700italic" rel="stylesheet" type="text/css">
  <link href="https://fonts.googleapis.com/css?family=Montserrat:400,700" rel="stylesheet" type="text/css">
  <style type="text/css">
    body .well .form-control, .container .well .form-control, .container-fluid .well .form-control, body .well:not([class^="well well-material-"]) .form-control, .container .well:not([class^="well well-material-"]) .form-control, .container-fluid .well:not([class^="well well-material-"]) .form-control {
        border-bottom-color: #fff;
    }
    #userInput {
      margin-left: auto;
      margin-right: auto;
      border-bottom-color: #fff;
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
      box-shadow: none;
      display: table-cell;
      box-sizing: border-box;
      position: relative;
      outline: none;
    }
  </style>
</head>
<body id="body" onload="document.getElementById('timeInfo').innerHTML = 'Time remaining: ' + time;" style="background-color: #9ad9ea;">
    <center>
      <img id="imgLogo" src="/img/logo.png" width="10px" style="align-items: center; padding-bottom: 1%; padding-top: 1%">
      <div class="well" id="well" style="background-color: #efe3af; width: 98%;">
          <div id="timeAndRound" style="display: flex;">
              <label id="timeInfo" style="display: none; padding-right: 1%;"></label>
              <label id="roundInfo" style="padding-right: 1%;"></label>
              <div id="wordsInfo" style="display: flex; padding-right: 1%;"></div>
          </div>
          <button id="cmBtn" onclick="compactMode();" style="display: none;">Compact mode</button>
          <button id="rBtn" onclick="rematch();" style="display: none;">Rematch</button>
          <div style="display: flex;">
              <div id="users" style="position: relative;"></div>
              <div id="canvasDiv"></div>
              <div class="panel panel-default" id="panelMessages" style="width: 100%; display: none;">
                <div class="panel-heading">Messenger</div>
                <div id="panel" class="panel-body"></div>
                <input id="message" type="text" class="form-control" aria-describedby="basic-addon1" maxlength="768" style="padding-left: 1%; border: solid;">
                <button id="send" class="btn btn-primary btn-flat" style="color: black;" onclick="handleMsg();">Send</button>
              </div>
          </div>
          <div id="drawingToolsDiv"></div>
          <p id="typing"><br></p>
          <div class="row" id="divLoginAndRoomCode">
              <div id="divLogin">
                  <div class="input-group">
                      <span class="input-group-addon"><span id="icon" class="mdi mdi-social-person"></span></span>
                      <label id="lblUserName">Username</label>
                      <input id="userInput" type="text" class="form-control" aria-describedby="basic-addon1" maxlength="768">
                      <label id="lblRoomCode1">Game code (empty for random)</label>
                      <input id="roomCode" type="text" class="form-control" aria-describedby="basic-addon1" maxlength="768">
                  </div>
                  <div id="inputAndButtons" style="text-align: center;">
                      <div class="input-group">
                          <span class="input-group-btn">
                              <button id="sendUserName" class="btn btn-primary btn-flat" onclick="handleLogin();" style="color: black;">Play</button>
                          </span>
                      </div>
                      <div class="input-group">
                          <span class="input-group-btn">
                              <button id="privateRoom" class="btn btn-primary btn-flat" style="color: black;" onclick="handleLogin(true);">Create Private Room</button>
                          </span>
                      </div>
                  </div>
              </div>
              <label id="lblRoomCode"></label>
          </div>
      </div>
  </center>
  <div id="well_2" style="display: none;">
      <button id="cmBtn_2" onclick="compactMode();">Normal mode</button>
      <div id="menu"></div>
      <div id="canvasDiv_2" style="margin-left: 15px; margin-right: 15px;"></div>
  </div>
  <script src="js/complete.ly.1.0.1.min.js"></script>
  <script src="js/jquery-2.1.3.min.js"></script>
  <script src="js/emojione.min.js"></script>
  <script src="js/bootstrap.min.js"></script>
  <script src="js/jquery-ui.min.js"></script>
  <script src="js/jquery.easing.min.js"></script>
  <script src="js/jquery.linkify.min.js"></script>
  <script src="js/ripples.min.js"></script>
  <script src="js/material.min.js"></script>
  <script type="text/javascript">
    /* Variables */
    var user;
    var id;
    var users = [];
    //var users = [['u1', 0], ['u2', 1000], ['u3', 50]];
    var selectedUser;
    var words;
    var timer;
    var compact = false;
    var socket;
    var oldname;
    var username;
    var roomCode;
    var privateRoom = false;
    var typeTimer;
    var clients = [];
    var nmr = 0;
    var dev = true;
    var unread = 0;
    var focus = true;
    var connected = false;
    //var version = VERSION;
    var regex = /(&zwj;|&nbsp;)/g;

    var settings = {
        'name': null,
        'emoji': true,
        'greentext': true,
        'inline': true,
        'sound': true,
        'desktop': false,
        'synthesis': false,
        'recognition': false
    };

    var d;
    /* Config */
    //document.getElementById('version').innerHTML = version;

    /* Connection */
    var connect = function() {
        var protocol;

        if(window.location.protocol === 'https:') {
            protocol = 'wss://';
        } else {
            protocol = 'ws://';
        }
        socket = new WebSocket(protocol + window.location.host + '/socket/websocket');
        socket.onopen = function() {
            var ping = setInterval(function(){
                socket.send(JSON.stringify({type: 'ping'}));
            }, 50 * 1000);
            updateInfo();
        };
        socket.onclose = function() {
            clearTimeout(typeTimer);
            $('#admin').hide();
            clients = [];

            if(connected) {
                updateBar('mdi-action-autorenew spin', 'Connection lost, reconnecting...', true);

                timer = setTimeout(function() {
                    console.warn('Connection lost, reconnecting...');
                    connect();
                }, 1500);
            }
        };
        socket.onmessage = function(e) {
            var data = JSON.parse(e.data);
            console.log(data);
            username = username.split('_')[0];//pendiente mejorar
            switch (data['type'])
            {
                case 'update':
                    if (data['user'] == username)
                    {
                        document.getElementById(wordsInfo).innerHTML = '<label>Waiting other players...</label><br>';
                        document.getElementById(wordsInfo).style.display = 'block';
                        document.getElementById('divLogin').style.display = 'none';

                        roomCode = data['roomCode'];        
                        id = data['id'];
                        for (var i = 0; i < data['usersInRoom'].length; i++)
                        {
                            var f = false;
                            for (var j = 0; j < users.length; j++)
                            {
                                if (users[j][0] == data['usersInRoom'][i])
                                {
                                    f = true;
                                }
                            }
                            if (!f)
                            {
                                users.push([data['usersInRoom'][i], 0]);
                                updateUsersInfo();
                            }
                        }
                        if (users.length > 1)
                        {
                            document.getElementById(panelMessages).style.display = 'block';
                        }
                        if (users.length > 2)
                        {
                            handleNewUserNeedsInfo();
                        }
                        document.getElementById(lblRoomCode).innerHTML = 'The room code is: ' + roomCode;

                        if ((data['selectedUser'] != undefined) && (data['selectedUser'] != ''))
                        {
                            selectedUser = data['selectedUser'];
                            updateUsersInfo();
                            if (data['selectedUser'] == username)
                            {
                                //document.getElementById('cmBtn').style.display = 'block';
                                words = data['words'];
                                var w = document.getElementById(wordsInfo);
                                w.style.display = 'flex';
                                w.innerHTML = '';
                                var html = '';
                                if (!data['full'])
                                {
                                    html += '<label>Waiting other players...</label><br>';
                                }
                                html += '<label>Select a word: </label>';
                                for (var i = 0; i < words.length; i++)
                                {
                                    html += '<button id="w_' + i + '" onclick="selectWord(this.id);">' + words[i] + '</button><br>';
                                }
                                w.innerHTML = html;
                                document.getElementById('send').childNodes[0].nodeValue = 'Send';
                                updateBar('mdi-content-send', 'Type here', false);
                                document.getElementById(privateRoom).style.display = 'none';
                            }
                            else
                            {
                                var html = '';
                                if (!data['full'])
                                {
                                    html += '<label>Waiting other players...</label><br>';
                                }
                                html += '<label>' + data['selectedUser'] + ' is selecting a word.</label>';
                                document.getElementById(wordsInfo).innerHTML = html;
                                document.getElementById('send').childNodes[0].nodeValue = 'Send';
                                updateBar('mdi-content-send', 'Type here', false);
                            }
                            document.getElementById(roundInfo).innerHTML = 'Round: ' + data['round'][0] + ' of ' + data['round'][1];
                        }
                        else
                        {
                            if (compact)
                            {
                                compactMode();
                            }
                            document.getElementById('cmBtn').style.display = 'none';
                            //¿Error?
                        }
                    }
                    else
                    {
                        if ((data['roomCode'] != undefined) && (data['roomCode'] != '')  && (data['roomCode'] == roomCode))
                        {
                            document.getElementById('rBtn').style.display = 'none';
                            //id = data['id'];
                            for (var i = 0; i < data['usersInRoom'].length; i++)
                            {
                                var f = false;
                                for (var j = 0; j < users.length; j++)
                                {
                                    if (users[j][0] == data['usersInRoom'][i])
                                    {
                                        f = true;
                                    }
                                }
                                if (!f)
                                {
                                    users.push([data['usersInRoom'][i], 0]);
                                }
                            }
                            if (users.length > 1)
                            {
                                document.getElementById(panelMessages).style.display = 'block';
                            }
                            updateUsersInfo();
                            if (users.length > 1)
                            {
                                points = [];
                                changeSize();
                                selectedUser = data['selectedUser'];
                                updateUsersInfo();
                                if ((data['selectedUser'] != undefined) && (data['selectedUser'] != ''))
                                {
                                    if (data['selectedUser'] == username)
                                    {
                                        var html = '';
                                        if (!data['full'])
                                        {
                                            html += '<label>Waiting other players...</label><br>';
                                        }
                                        html += '<label>Select a word: </label>';
                                        //document.getElementById('cmBtn').style.display = 'block';
                                        words = data['words'];
                                        var w = document.getElementById(wordsInfo);
                                        w.style.display = 'flex';
                                        w.innerHTML = '';
                                        for (var i = 0; i < words.length; i++)
                                        {
                                            html += '<button id="w_' + i + '" onclick="selectWord(this.id);">' + words[i] + '</button>';
                                        }
                                        w.innerHTML = html;
                                    }
                                    else
                                    {
                                        var html = '';
                                        if (!data['full'])
                                        {
                                            html += '<label>Waiting other players...</label><br>';
                                        }
                                        html += '<label>' + data['selectedUser'] + ' is selecting a word.</label>';
                                        /*if (compact)
                                        {
                                            compactMode();
                                        }*/
                                        document.getElementById('cmBtn').style.display = 'none';
                                        document.getElementById(wordsInfo).innerHTML = html;
                                    }
                                    document.getElementById(roundInfo).innerHTML = 'Round: ' + data['round'][0] + ' of ' + data['round'][1];
                                }
                                else
                                {
                                    //¿Error?
                                }
                                //document.getElementById('send').childNodes[0].nodeValue = 'Send';
                                updateBar('mdi-content-send', 'Type here', false);
                                document.getElementById('privateRoom').style.display = 'none';
                                connected = true;
                                settings.name = username;
                                localStorage.settings = JSON.stringify(settings);
                            }
                        }
                    }
                break;
                case 'rematch':
                    if (data['roomCode'] == roomCode)
                    {
                        showChat(data.type, '', 'Rematch!', '', '');
                        document.getElementById('rBtn').style.display = 'none';
                        for (var i = 0; i < users.length; i++)
                        {
                            users[i][1] = 0;
                        }
                        document.getElementById(panelMessages).style.display = 'block';
                        document.getElementById(messageInput).style.display = 'block';
                        document.getElementById(send).style.display = 'block';
                        document.getElementById('privateRoom').style.display = 'none';
                        document.getElementById('divLogin').style.display = 'block';
                        points = [];
                        changeSize();
                        selectedUser = data['selectedUser'];
                        updateUsersInfo();
                        if ((data['selectedUser'] != undefined) && (data['selectedUser'] != ''))
                        {
                            if (data['selectedUser'] == username)
                            {
                                var html = '';
                                if (!data['full'])
                                {
                                    html += '<label>Waiting other players...</label><br>';
                                }
                                html += '<label>Select a word: </label>';
                                words = data['words'];
                                var w = document.getElementById(wordsInfo);
                                w.style.display = 'flex';
                                w.innerHTML = '';
                                for (var i = 0; i < words.length; i++)
                                {
                                    html += '<button id="w_' + i + '" onclick="selectWord(this.id);">' + words[i] + '</button>';
                                }
                                w.innerHTML = html;
                            }
                            else
                            {
                                var html = '';
                                if (!data['full'])
                                {
                                    html += '<label>Waiting other players...</label><br>';
                                }
                                html += '<label>' + data['selectedUser'] + ' is selecting a word.</label>';
                                document.getElementById('cmBtn').style.display = 'none';
                                document.getElementById(wordsInfo).innerHTML = html;
                            }
                            document.getElementById(roundInfo).innerHTML = 'Round: ' + data['round'][0] + ' of ' + data['round'][1];
                        }
                        document.getElementById('send').childNodes[0].nodeValue = 'Send';
                        updateBar('mdi-content-send', 'Type here', false);
                        document.getElementById('privateRoom').style.display = 'none';
                    }
                break;
                case 'userDisconected':
                    if (data['roomCode'] == roomCode)
                    {
                        showChat(data.type, '', data['user'] + ' disconnected.', '', '');
                        var auxUsers = [];
                        for (var i = 0; i < users.length; i++)
                        {
                            if (users[i][0] != data['user'])
                            {
                                auxUsers.push(users[i]);
                            }
                        }
                        users = [...auxUsers];
                        if (users.length < 2)
                        {
                            canvasDisplay = 'none';
                            //changeSize($(b).width(), ($(window).height() * 0.9));
                            changeSize();
                            document.getElementById('cmBtn').style.display = 'none';
                            document.getElementById(panelMessages).style.display = 'none';
                            document.getElementById(roundInfo).innerHTML = '';
                            stopTime = true;
                            document.getElementById(timeInfo).innerHTML = 'Time remaining: ' + time;
                            document.getElementById(wordsInfo).innerHTML = '';
                            document.getElementById(drawingToolsDiv).style.display = 'none';
                            selectedUser = undefined;
                            if (data['subType'] == 'gameOver')
                            {
                                canvas.removeEventListener('touchstart', onTouch, false);
                                canvas.removeEventListener('touchend', onTouchUp, false);
                                canvas.removeEventListener('mouseup', onUp, false);
                                canvas.removeEventListener('mousemove', onMove, false);
                                document.getElementById(drawingToolsDiv).style.display = 'none';
                                document.getElementById(panelMessages).style.display = 'block';
                                showChat(data.type, '', 'The word was \'' + data['word'] + '\'.', '', '');
                                stopTime = true;
                                points = [];
                                //var b = $('#body');
                                //changeSize($(b).width(), ($(window).height() * 0.9));
                                changeSize();
                                selectedUser = '';
                                for (var i = 0; i < users.length; i++)
                                {
                                    //if (users[i][0] == data['user'])
                                    {
                                        users[i][1] = data['puntuation'][i];
                                        //i = users.length;
                                    }
                                }
                                updateUsersInfo();
                                if (data['winners'].length > 1)
                                {
                                    var names = data['winners'][0][0];
                                    for (var i = 1; i < data['winners'].length; i++)
                                    {
                                        names += ', ' + data['winners'][i][0];
                                    }
                                    showChat(data.type, '', 'Winners: ' + names + '.', '', '', 15);
                                }
                                else
                                {
                                    showChat(data.type, '', 'Winner: ' + data['winners'][0][0] + '.', '', '', 15);
                                }
                                showChat(data.type, '', 'Game over.', '', '');

                                document.getElementById('rBtn').style.display = 'block';
                            }
                        }
                        else
                        {
                            if (data['subType'] == 'reasignedSelectedUser')
                            {
                                stopTime = true;
                                selectedUser = data['selectedUser'];
                                updateUsersInfo();
                                if (data['selectedUser'] == username)
                                {
                                    //document.getElementById('cmBtn').style.display = 'block';
                                    words = data['words'];
                                    var w = document.getElementById(wordsInfo);
                                    w.style.display = 'flex';
                                    w.innerHTML = '';
                                    var html = '';
                                    if (!data['full'])
                                    {
                                        html += '<label>Waiting other players...</label><br>';
                                    }
                                    html += '<label>Select a word: </label>';
                                    for (var i = 0; i < words.length; i++)
                                    {
                                        html += '<button id="w_' + i + '" onclick="selectWord(this.id);">' + words[i] + '</button>';
                                    }
                                    w.innerHTML = html;
                                    document.getElementById('send').childNodes[0].nodeValue = 'Send';
                                    updateBar('mdi-content-send', 'Type here', false);
                                    document.getElementById(privateRoom).style.display = 'none';
                                }
                                else
                                {
                                    var html = '';
                                    if (!data['full'])
                                    {
                                        html += '<label>Waiting other players...</label><br>';
                                    }
                                    html += '<label>' + data['selectedUser'] + ' is selecting a word.</label>';
                                    document.getElementById(wordsInfo).innerHTML = html;
                                    document.getElementById(wordsInfo).style.display = 'flex';
                                    document.getElementById('send').childNodes[0].nodeValue = 'Send';
                                    updateBar('mdi-content-send', 'Type here', false);
                                }
                                document.getElementById(roundInfo).innerHTML = 'Round: ' + data['round'][0] + ' of ' + data['round'][1];
                            }
                        }
                        updateUsersInfo();
                    }
                break;
                case 'returningGameInfo':
                    //console.log(data);
                    if ((data['roomCode'] == roomCode) && (data['user'] == username))
                    {
                        if ((data['selectedUser'] != undefined) && (data['selectedUser'] != ''))
                        {
                            var html = '';
                            if (!data['full'])
                            {
                                html += '<label>Waiting other players...</label><br>';
                            }
                            html += '<label>' + data['selectedUser'] + ' is selecting a word.</label>';
                            document.getElementById('cmBtn').style.display = 'none';
                            document.getElementById(wordsInfo).innerHTML = html;
                            document.getElementById(roundInfo).innerHTML = 'Round: ' + data['round'][0] + ' of ' + data['round'][1];
                            selectedUser = data['selectedUser'];
                            updateUsersInfo();
                            document.getElementById('send').childNodes[0].nodeValue = 'Send';
                            updateBar('mdi-content-send', 'Type here', false);
                            document.getElementById('privateRoom').style.display = 'none';
                        }
                    }
                break;
                case 'startDrawing':
                    if (data['roomCode'] == roomCode)
                    {
                        //document.getElementById(canvas).style.display = 'block';
                        canvasDisplay = 'block';
                        points = [];
                        //var b = $('#body');
                        //changeSize($(b).width(), ($(window).height() * 0.9));//Con esto se limpia el Canvas.
                        changeSize();
                        stopTime = false;
                        initTime();
                        selectedUser = data['selectedUser'];
                        updateUsersInfo();
                        if (data['selectedUser'] == username)
                        {
                            //document.getElementById('cmBtn').style.display = 'block';
                            //changeSize($(b).width(), ($(window).height() * 0.9), true);
                            changeSize(true);
                            document.getElementById('send').childNodes[0].nodeValue = 'Send';
                            updateBar('mdi-content-send', 'Type here', false);
                        }
                        else
                        {
                            /*if (compact)
                            {
                                compactMode();
                            }*/
                            //document.getElementById('cmBtn').style.display = 'none';
                            document.getElementById(wordsInfo).style.display = 'flex';
                            //document.getElementById(wordsInfo).innerHTML = '<label>' + data['selectedUser'] + ' is selecting a word.</label>';
                            showWordLength(data['wordLength']);
                            document.getElementById('send').childNodes[0].nodeValue = 'Send';
                            updateBar('mdi-content-send', 'Type here', false);
                            document.getElementById('privateRoom').style.display = 'none';
                        }
                    }
                break;
                case 'nextTurn':
                    if (data['roomCode'] == roomCode)
                    {
                        canvas.removeEventListener('touchstart', onTouch, false);
                        canvas.removeEventListener('touchend', onTouchUp, false);
                        canvas.removeEventListener('mouseup', onUp, false);
                        canvas.removeEventListener('mousemove', onMove, false);
                        document.getElementById(drawingToolsDiv).style.display = 'none';
                        if (data['timeOut'])
                        {
                            showChat(data.type, '', 'Time out.', '', '');
                        }
                        if ((data['user'] != '') && (data['user'] != undefined))
                        {
                            showChat(data.type, '', data['user'] + ' guessed the word!', '', '', 15);
                        }
                        showChat(data.type, '', 'The word was \'' + data['word'] + '\'.', '', '');
                        stopTime = true;
                        points = [];
                        //var b = $('#body');
                        //changeSize($(b).width(), ($(window).height() * 0.9));
                        changeSize();
                        selectedUser = data['selectedUser'];
                        for (var i = 0; i < users.length; i++)
                        {
                            //if (users[i][0] == data['user'])
                            {
                                users[i][1] = data['puntuation'][i];
                                //i = users.length;
                            }
                        }
                        updateUsersInfo();
                        if (data['selectedUser'] != '')
                        {
                            if (data['selectedUser'] == username)
                            {
                                var html = '';
                                if (!data['full'])//No funciona.
                                {
                                    html += '<label>Waiting other players...</label><br>';
                                }
                                html += '<label>Select a word: </label>';
                                //document.getElementById('cmBtn').style.display = 'block';
                                words = data['words'];
                                var w = document.getElementById(wordsInfo);
                                w.style.display = 'flex';
                                w.innerHTML = '';
                                for (var i = 0; i < words.length; i++)
                                {
                                    html += '<button id="w_' + i + '" onclick="selectWord(this.id);">' + words[i] + '</button>';
                                }
                                w.innerHTML = html;
                                //console.log(w.innerHTML);
                                document.getElementById('send').childNodes[0].nodeValue = 'Send';
                                updateBar('mdi-content-send', 'Type here', false);
                            }
                            else
                            {
                                if (compact)
                                {
                                    compactMode();
                                }
                                var html = '';
                                if (!data['full'])
                                {
                                    html += '<label>Waiting other players...</label><br>';
                                }
                                html += '<label>' + data['selectedUser'] + ' is selecting a word.</label>';
                                document.getElementById('cmBtn').style.display = 'none';
                                document.getElementById(wordsInfo).innerHTML = html;
                                document.getElementById('send').childNodes[0].nodeValue = 'Send';
                                updateBar('mdi-content-send', 'Type here', false);
                                document.getElementById('privateRoom').style.display = 'none';
                            }
                            document.getElementById('roundInfo').innerHTML = 'Round: ' + data['round'][0] + ' of ' + data['round'][1];
                        }
                        else
                        {
                            //¿Error?
                        }
                    }
                break;
                case 'gameOver':
                    if (data['roomCode'] == roomCode)
                    {
                        canvas.removeEventListener('touchstart', onTouch, false);
                        canvas.removeEventListener('touchend', onTouchUp, false);
                        canvas.removeEventListener('mouseup', onUp, false);
                        canvas.removeEventListener('mousemove', onMove, false);
                        document.getElementById(drawingToolsDiv).style.display = 'none';
                        if (data['timeOut'])
                        {
                            showChat(data.type, '', 'Time out.', '', '');
                        }
                        if ((data['user'] != '') && (data['user'] != undefined))
                        {
                            showChat(data.type, '', data['user'] + ' guessed the word!', '', '', 15);
                        }
                        showChat(data.type, '', 'The word was \'' + data['word'] + '\'.', '', '');
                        stopTime = true;
                        points = [];
                        //var b = $('#body');
                        //changeSize($(b).width(), ($(window).height() * 0.9));
                        changeSize();
                        selectedUser = '';
                        for (var i = 0; i < users.length; i++)
                        {
                            //if (users[i][0] == data['user'])
                            {
                                users[i][1] = data['puntuation'][i];
                                //i = users.length;
                            }
                        }
                        updateUsersInfo();
                        if (data['winners'].length > 1)
                        {
                            var names = data['winners'][0][0];
                            for (var i = 1; i < data['winners'].length; i++)
                            {
                                names += ', ' + data['winners'][i][0];
                            }
                            showChat(data.type, '', 'Winners: ' + names + '.', '', '', 15);
                        }
                        else
                        {
                            showChat(data.type, '', 'Winner: ' + data['winners'][0][0] + '.', '', '', 15);
                        }
                        showChat(data.type, '', 'Game over.', '', '');

                        document.getElementById('rBtn').style.display = 'block';
                    }
                break;
                case 'wrongWord':
                    if (data['roomCode'] == roomCode)
                    {
                        showChat(data.type, data.user, data['guess'], '', '');
                    }
                break;
                case 'message':
                    if (data['roomCode'] == roomCode)
                    {
                        showChat(data.type, data.user, data['guess'], '', '');
                    }
                break;
                case 'drawing':
                    if ((data['roomCode'] == roomCode) && (selectedUser != username))
                    {
                        points = data['draw']['points'];
                        var p = data['draw']['points'];
                        for (var i = 0; i < p.length; i++)
                        {
                            //console.log(p[i]);
                            ctx.beginPath();
                            ctx.strokeStyle = p[i]['colour'];
                            ctx.lineWidth = canvas.width * p[i]['lineWidth'];
                            ctx.moveTo(canvas.width * p[i]['initial_pos'][0], canvas.height * p[i]['initial_pos'][1]);
                            if (p[i]['others_pos'].length)
                            {
                                var sub_p = p[i]['others_pos'];
                                for (var j = 0; j < sub_p.length; j++)
                                {
                                    ctx.lineTo(canvas.width * sub_p[j][0], canvas.height * sub_p[j][1]);
                                }
                                ctx.stroke();
                            }
                        }
                    }
                break;
                case 'error':
                    if ((id == undefined) || (data['id'] == id))
                    {
                        document.getElementById(panelMessages).style.display = 'block';
                        showChat(data.type, data.user, data['error'], '', '');
                        username = undefined;
                    }
                break;
                default:
                    console.log('No se reconoce: ' + data['type']);
                break;
            }
            if (data['type'] == 'update')
            {
                
            }
            else
            {
                if(data.type == 'delete') {
                    return $('div[data-mid="' + data.message + '"]').remove();
                }
                if(data.type == 'server') {
                    switch(data.info) {
                        case 'rejected':
                            var message;

                            if(data.reason == 'length') {
                                message = 'Your username must have at least 3 characters and no more than 16 characters';
                            }

                            if(data.reason == 'format') {
                                message = 'Your username must only contain alphanumeric characters (numbers, letters and underscores)';
                            }

                            if(data.reason == 'taken') {
                                message = 'This username is already taken';
                            }

                            if(data.reason == 'banned') {
                                message = 'You have been banned from the server for ' + data.time / 60 / 1000 + ' minutes. You have to wait until you get unbanned to be able to connect again';
                            }

                            showChat('light', null, message);

                            if(!data.keep) {
                                username = undefined;
                                connected = false;
                            } else {
                                username = oldname;
                            }
                            break;
                        case 'success':
                            alert('success');
                            document.getElementById('privateRoom').style.display = 'none';
                            //document.getElementById('canvas').style.display = 'block';
                            document.getElementById(panelMessages).style.display = 'block';
                            
                            //canvasDisplay = 'block';
                            //var b = $('#body');
                            //changeSize($(b).width());
                            
                            document.getElementById('send').childNodes[0].nodeValue = 'Send';
                            updateBar('mdi-content-send', 'Type here', false);
                            document.getElementById('privateRoom').style.display = 'none';
                            connected = true;
                            settings.name = username;
                            localStorage.settings = JSON.stringify(settings);
                            break;
                        case 'update':
                            roomCode = data['roomCode'];
                            showChat('info', null, data.user.oldun + ' changed its name to ' + data.user.un);
                            clients[data.user.id] = data.user;
                            break;

                        case 'connection':
                            var userip = data.user.ip ? ' [' + data.user.ip + ']' : '';
                            //No es este el que aparece al principio.
                            showChat('info', null, data.user.un + userip + ' connected to the server');

                            clients[data.user.id] = data.user;
                            //document.getElementById('users').innerHTML = Object.keys(clients).length + ' USERS';
                            break;

                        case 'disconnection':
                            var userip = data.user.ip ? ' [' + data.user.ip + ']' : '';

                            if(data.user.un != null) {
                                //showChat('info', null, data.user.un + userip + ' disconnected from the server');
                            }

                            delete clients[data.user.id];
                            //document.getElementById('users').innerHTML = Object.keys(clients).length + ' USERS';
                            break;

                        case 'spam':
                            showChat('global', null, 'You have to wait 1 second between messages. Continuing on spamming the servers may get you banned. Warning ' + data.warn + ' of 5');
                            break;

                        case 'clients':
                            clients = data.clients;
                            //document.getElementById('users').innerHTML = Object.keys(clients).length + ' USERS';
                            break;

                        case 'user':
                            user = data.client.id;
                            break;
                    }
                } else if((data.type == 'kick' || data.type == 'ban') && data.extra == username) {
                    location.reload();
                } else {
                    if(data.message.indexOf('@' + username) > -1) {
                        data.type = 'mention';
                    }
                    if(settings.synthesis) {
                        textToSpeech.text = data.message;
                        speechSynthesis.speak(textToSpeech);
                    }
                }
                if(data.type == 'role')
                {
                    if(getUserByName(data.extra) != undefined) {
                        if(data.extra == username && data.role > 0) {
                            $('#admin').show();
                            $('#menu-admin').show();
                        }

                        if(data.extra == username && data.role == 0) {
                            $('#admin').hide();
                            $('#menu-admin').hide();
                        }

                        clients[getUserByName(data.extra).id].role = data.role;
                    }
                }
                if(data.type == 'global' || data.type == 'pm' || data.type == 'mention') {
                    if(!focus) {
                        unread++;
                        document.title = '(' + unread + ') Node.JS Chat';

                        if(settings.desktop) {
                            //desktopNotif(data.user + ': ' + data.message);
                        }
                    }
                }
            }
        }
    };
    /* Functions */
    function sendSocket(value, method, other, txt)
    {
        socket.send(JSON.stringify({
            type: method,
            message: value,
            subtxt: txt,
            extra: other
        }));
    }
    function updateInfo()
    {
        socket.send(JSON.stringify({
            user: username,
            type: 'update'
        }));
    }
    function getUserByName(name)
    {
        for(client in clients)
        {
            if(clients[client].un == name)
            {
                return clients[client];
            }
        }
    }
    function updateBar(icon, placeholder, disable)
    {
        document.getElementById('icon').className = 'mdi ' + icon;
        $('#' + messageInput).attr('placeholder', placeholder);
        $('#' + messageInput).prop('disabled', disable);
        $('#send').prop('disabled', disable);
    }
    function showChat(type, user, message, subtxt, mid, fontSize = null)
    {
        var nameclass = '';
        if(type == 'global' || type == 'kick' || type == 'ban' || type == 'info' || type == 'light' || type == 'help' || type == 'role')
        {
            user = 'System';
        }
        if(type == 'me' || type == 'em')
        {
            type = 'emote';
        }
        if(!mid)
        {
            mid == 'system';
        }
        if(!subtxt)
        {
            if (fontSize == null)
            {
                $('#' + panel).append('<div data-mid="' + mid + '" class="' + type + '""><span class="name ' + nameclass + '"><b><a class="namelink" href="javascript:void(0)">' + user + '</a></b></span><span class="delete"><a href="javascript:void(0)">DELETE</a></span><span class="timestamp">' + getTime() + '</span><span class="msg">' + message + '</span></div>');
            }
            else
            {
                $('#' + panel).append('<div data-mid="' + mid + '" class="' + type + '""><span class="name ' + nameclass + '"><b><a class="namelink" href="javascript:void(0)">' + user + '</a></b></span><span class="delete"><a href="javascript:void(0)">DELETE</a></span><span class="timestamp">' + getTime() + '</span><span class="msg" style="font-size: ' + fontSize + 'pt; border: solid;">' + message + '</span></div>');
            }
        }
        else
        {
            $('#' + panel).append('<div data-mid="' + mid + '" class="' + type + '""><span class="name ' + nameclass + '"><b><a class="namelink" href="javascript:void(0)">' + user + '</a></b></span><span class="timestamp">(' + subtxt + ') ' + getTime() + '</span><span class="msg">' + message + '</span></div>');
        }
        $('#' + panel).animate({scrollTop: $('#' + panel).prop('scrollHeight')}, 500);
        //updateStyle();
        nmr++;
        if(settings.inline)
        {
            var m = message.match(/(https?|ftp):\/\/[^\s/$.?#].[^\s]*/gmi);

            if(m) {
                m.forEach(function(e, i, a) {
                    // Gfycat Support
                    if(e.indexOf('//gfycat') !== -1) {
                        var oldUrl = e;
                        e = e.replace('//gfycat.com', '//gfycat.com/cajax/get').replace('http://', 'https://');

                        $.getJSON(e, function(data) {
                            testImage(data.gfyItem.gifUrl.replace('http://', 'https://'), mid, oldUrl);
                        });
                    } else {
                        testImage(e, mid, e);
                    }
                });
            }
        }
    }
    function testImage(url, mid, oldUrl)
    {
        var img = new Image();

        img.onload = function() {
            $('div[data-mid=' + mid + '] .msg a[href="' + oldUrl.replace('https://', 'http://') + '"]').html(img);
            $('#' + panel).animate({scrollTop: $('#' + panel).prop('scrollHeight')}, 500);
        };
        img.src = url;
    }
    function handleNewUserNeedsInfo()
    {
        console.log(roomCode);
        socket.send(JSON.stringify({
            type: 'newUserNeedsInfo',
            user: username, 
            roomCode: roomCode
        }));
    }
    function handleMsg()
    {
        var value = $('#' + messageInput).val().replace(regex, ' ').trim();
        if ((selectedUser != undefined) && (selectedUser != ''))
        {
            socket.send(JSON.stringify({
                type: 'guess',
                user: username, 
                guess: value, 
                roomCode: roomCode
            }));
        }
        $('#' + messageInput).val('');
    }
    function handleLogin(private = false)
    {
        var value = $('#userInput').val().replace(regex, ' ').trim();
        if (private)
        {
            roomCode = 'private';
            privateRoom = true;
        }
        else
        {
            if (!connected)
            {
                roomCode = $('#roomCode').val();
            }
        }
        if ((value.length > 0) && (!connected) && (username === undefined))
        {
            username = value + '_' + roomCode;
            connect();
        }
        $('#userInput').val('');
        $('#roomCode').val('');
    }
    function handleCanvas(points)
    {
        socket.send(JSON.stringify({
            type: 'drawing',
            user: username + '_' + roomCode, 
            message: '', 
            draw: {'points' : points},
            roomCode: roomCode
        }));
    }
    function handleTimeOut()
    {
        socket.send(JSON.stringify({
            type: 'timeOut', 
            roomCode: roomCode
        }));
    }
    function handleWordSelected(w)
    {
        socket.send(JSON.stringify({
            type: 'wordSelected', 
            word: w, 
            roomCode: roomCode
        }));
    }
    function getTime()
    {
        var now = new Date();
        var time = [now.getHours(), now.getMinutes(), now.getSeconds()];
     
        for(var i = 0; i < 3; i++)
        {
            if(time[i] < 10)
            {
                time[i] = '0' + time[i];
            }
        } 
        return time.join(':');
    }
    function updateStyle()
    {
        $('#' + panel).linkify();
        var element = document.getElementsByClassName('msg')[nmr];

        if(element.innerHTML != undefined) {
            if(settings.greentext && element.innerHTML.indexOf('&gt;') == 0) {
                element.style.color = '#689f38';
            }
        }
    }
  </script>
  <script type="text/javascript">
    var mouse = {x: null, y: null};
    var touch;
    var drawingTool = 'pencil';
    var canvas;
    var canvasId = 'canvasDiv';

    var timeAndRound = 'timeAndRound';
    var timeInfo = 'timeInfo';
    var roundInfo = 'roundInfo';
    var wordsInfo = 'wordsInfo';
    var drawingToolsDiv = 'drawingToolsDiv';
    var usersDiv = 'users';
    var panelMessages = 'panelMessages';
    var panel = 'panel';
    var send = 'send';
    var messageInput = 'message';
    var privateRoom = 'privateRoom';
    var wordsInfo = 'wordsInfo';
    var lblRoomCode = 'lblRoomCode';

    var lineColour = '#000000';
    var pencilSize = 0.005;
    var eraserSize = 0.0125;

    var ctx;
    var points = [];
    var auxPoints = [];
    var drawingTools;
    var canvasDisplay = 'none';
    //var canvasDisplay = 'block';
    var time = 90;
    var stopTime = false;
    var pr = false;
    var compact = false;

    $(document).ready(function () {
        $(window).resize(respondCanvas);
        function respondCanvas()
        {
            changeSize();
        }
        respondCanvas();
    });
    function changeSize(drawer = false)
    {
        $('#canvas').remove();
        $('#canvas2').remove();
        canvas = document.getElementById(id);
        var x_b = $(window).width() - document.getElementById('users').clientWidth - (document.getElementById('panelMessages').clientWidth * 0.3);
        var y_b = x_b * 0.46796875;
        console.log(x_b, y_b);
        document.getElementById('imgLogo').style.width = (x_b * 0.3) + 'px';
        var map_size = [[], []];
        map_size[0] = (x_b);
        map_size[1] = (y_b);
        $('#canvas').remove();
        $('#canvas2').remove();
        var id = 'canvas';
        if (canvasId.split('_').length > 1)
        {
            id = 'canvas' + canvasId.split('_')[1];
        }
        $("#" + canvasId).append('<canvas width="' + map_size[0] + '" height="' + map_size[1] + '" id="' + id + '" style="position: relative; border: dotted; display: ' + canvasDisplay + ';">Canvas no soportado.</canvas>');
        canvas = document.getElementById(id);
        ctx = canvas.getContext('2d');
        var painting = document.getElementById(canvasId);
        var paint_style = getComputedStyle(painting);
        canvas.width = parseInt(paint_style.getPropertyValue('width'));
        canvas.height = parseInt(paint_style.getPropertyValue('height'));

        $('#compactMenu').remove();
        $('#menu').append(`
            <div id="compactMenu" style="
                position: absolute; 
                z-index: 3; 
                right: 0%; 
                width: ` + (canvas.offsetLeft * 0.8) + `px; 
                height: ` + ($(window).height() * 0.8) + `px; 
                background-color: #a0a0a0;" 
            onclick="expandCompactMenu();"></div>
        `);
        $('#containerCompactMenu').remove();
        $('#menu').append(`
            <div id="containerCompactMenu" style="
                position: absolute; 
                display: none;
                z-index: 2; 
                width: ` + ((canvas.width * 0.45) + canvas.offsetLeft) + `px; 
                height: ` + ($(window).height() * 0.8) + `px; 
                border: solid; 
                left: 55%; 
                border-width: 1px; 
                background-color: #ffffff;" 
            onclick="expandCompactMenu();">
                <div id="timeAndRound_2">
                    <label id="timeInfo_2"></label>
                    <label id="roundInfo_2"></label>
                </div>
                <br>
                <br>
                <div id="wordsInfo_2"></div>
                <br>
                <div id="drawingToolsDiv_2"></div>
                <div id="users_2"></div>
                <div class="panel panel-default" id="panelMessages_2">
                    <div class="panel-heading">Messages</div>
                    <div id="panel_2" class="panel-body"></div>
                </div>
            </div>
        `);

        ctx.lineJoin = 'round';
        ctx.lineCap = 'round';
        ctx.strokeStyle = lineColour;
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = '#ffffff';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        var p = points;
        for (var i = 0; i < p.length; i++)
        {
            ctx.beginPath();
            ctx.lineWidth = (canvas.width * p[i]['lineWidth']);
            if (p[i]['drawingTool'] == 'eraser')
            {
                ctx.strokeStyle = '#ffffff';
            }
            else
            {
                ctx.strokeStyle = p[i]['colour'];
            }
            ctx.moveTo(canvas.width * p[i]['initial_pos'][0], canvas.height * p[i]['initial_pos'][1]);
            if (p[i]['others_pos'].length)
            {
                var sub_p = p[i]['others_pos'];
                for (var j = 0; j < sub_p.length; j++)
                {
                    ctx.lineTo(canvas.width * sub_p[j][0], canvas.height * sub_p[j][1]);
                }
                ctx.stroke();
            }
        }
        mouse = {x: null, y: null};
        if (drawer)
        {
            canvas.addEventListener('touchstart', onTouch, false);
            canvas.addEventListener('touchend', onTouchUp, false);
            canvas.addEventListener('mousedown', onClic, false);
            canvas.addEventListener('mouseup', onUp, false);
            
            showDrawingTools();
        }
        else
        {
            canvas.removeEventListener('touchstart', onTouch, false);
            canvas.removeEventListener('touchend', onTouchUp, false);
            canvas.removeEventListener('mouseup', onUp, false);
            canvas.removeEventListener('mousemove', onMove, false);
        }
        //alert($(window).width() + ', ' + document.getElementById('users').clientWidth + ', ' + (document.getElementById('panelMessages').clientWidth * 0.4));
    }
    function onToolClic(e)
    {
        if (e['target']['id'].split('_').length == 3)
        {
            lineColour = '#' + e['target']['id'].split('_')[2];
        }
        else
        {
            drawingTool = (e['target']['id'].split('_')[1]);
        }
    }
    function onToolTouch(event)
    {
        if (event['target']['id'].split('_').length == 3)
        {
            lineColour = '#' + event['target']['id'].split('_')[2];
        }
        else
        {
            drawingTool = (event['target']['id'].split('_')[1]);
        }
    }
    function onTouch(event)
    {
        if (event.targetTouches.length == 1)
        {
            showDrawingTools();
            touch = event.targetTouches[0];
            mouse.x = touch.pageX - this.offsetLeft - this.offsetParent.offsetLeft;
            mouse.y = touch.pageY - this.offsetTop;
            var colour = '#ffffff';
            if (drawingTool != 'eraser')
            {
                colour = lineColour;
            }
            points.push({
                'initial_pos' : [mouse.x / canvas.width, mouse.y / canvas.height], 
                'others_pos' : [], 
                'lineWidth' : pencilSize, 
                'colour' : colour, 
                'drawingTool' : drawingTool
            });
            ctx.lineWidth = (pencilSize * canvas.width);
            if (drawingTool == 'eraser')
            {
                ctx.strokeStyle = '#ffffff';
                points[points.length - 1]['lineWidth'] = eraserSize;
                points[points.length - 1]['colour'] = '#ffffff';
                ctx.lineWidth = (eraserSize * canvas.width);
            }
            else
            {
                ctx.strokeStyle = lineColour;
            }
            ctx.beginPath();
            ctx.moveTo(mouse.x, mouse.y);
            ctx.lineTo(mouse.x, mouse.y);
            ctx.stroke();
            canvas.addEventListener('touchmove', onTouchMove, false);
            canvas.removeEventListener('mousedown', onPaint, false);
            canvas.removeEventListener('mouseup', onUp, false);
            canvas.removeEventListener('mousemove', onMove, false);
        }
    }
    function onTouchMove(e)
    {
        touch = e.targetTouches[0]; 
        mouse.x = touch.pageX - this.offsetLeft - this.offsetParent.offsetLeft;
        mouse.y = touch.pageY - this.offsetTop;
        points[points.length - 1]['others_pos'].push([mouse.x / canvas.width, mouse.y / canvas.height]);
        ctx.lineTo(mouse.x, mouse.y);
        ctx.stroke();
    }
    function onTouchUp()
    {
        points[points.length - 1]['others_pos'].push([mouse.x / canvas.width, mouse.y / canvas.height]);
        handleCanvas(points);
        canvas.removeEventListener('touchmove', onTouchMove, false);
    }
    function onClic(e)
    {
        showDrawingTools();
        mouse.x = e.pageX - this.offsetLeft - this.offsetParent.offsetLeft;
        mouse.y = e.pageY - this.offsetTop;
        var colour = '#ffffff';
        if (drawingTool != 'eraser')
        {
            colour = lineColour;
        }
        points.push({
            'initial_pos' : [mouse.x / canvas.width, mouse.y / canvas.height], 
            'others_pos' : [], 
            'lineWidth' : pencilSize, 
            'colour' : colour, 
            'drawingTool' : drawingTool
        });
        ctx.lineWidth = (pencilSize * canvas.width);
        console.log(drawingTool);
        if (drawingTool == 'eraser')
        {
            ctx.strokeStyle = '#ffffff';
            points[points.length - 1]['lineWidth'] = eraserSize;
            points[points.length - 1]['colour'] = '#ffffff';
            ctx.lineWidth = (eraserSize * canvas.width);
        }
        else
        {
            ctx.strokeStyle = lineColour;
        }
        ctx.beginPath();
        ctx.moveTo(mouse.x, mouse.y);
        ctx.lineTo(mouse.x, mouse.y);
        ctx.stroke();
        canvas.addEventListener('mousemove', onMove, false);
    }
    function onMove(e)
    {
        mouse.x = e.pageX - this.offsetLeft - this.offsetParent.offsetLeft;
        mouse.y = e.pageY - this.offsetTop;
        points[points.length - 1]['others_pos'].push([mouse.x / canvas.width, mouse.y / canvas.height]);
        ctx.lineTo(mouse.x, mouse.y);
        ctx.stroke();
    }
    function onUp()
    {
        points[points.length - 1]['others_pos'].push([mouse.x / canvas.width, mouse.y / canvas.height]);
        handleCanvas(points);
        canvas.removeEventListener('mousemove', onMove, false);
    }
    function showWordLength(l)
    {
        var wI = document.getElementById(wordsInfo);
        wI.style.display = 'flex';
        wI.style.width = (l * 30) + 'px';
        var html = '';
        for (var i = 0; i < l; i++)
        {
            html += '<hr width="20px;" style="border-top: 2px solid #8c8b8b;">';
        }
        wI.innerHTML = html;
    }
    function selectWord(i)
    {
        document.getElementById(wordsInfo).innerHTML = '<label>The word is: ' + words[Number(i.split('_')[1])] + '</label>';
        document.getElementById('cmBtn').style.display = 'block';
        document.getElementById(drawingToolsDiv).style.display = 'block';
        //var b = $('#body');
        handleWordSelected(words[Number(i.split('_')[1])]);
        //changeSize($(b).width(), ($(window).height() * 0.9), true);
        changeSize(true);
    }
    function initTime()
    {
        document.getElementById(timeInfo).style.display = 'block';
        t = time;
        var countdown = () => {
            var timerUpdate = setInterval( () => {
                if (stopTime)
                {
                    clearInterval(timerUpdate);
                    t = time;
                    document.getElementById(timeInfo).style.display = 'none';
                }
                document.getElementById(timeInfo).innerHTML = 'Time remaining: ' + t;
                t--;
                if (t == 0)
                {
                    clearInterval(timerUpdate);
                    t = time;
                    if (selectedUser == username)
                    {
                        handleTimeOut();
                    }
                }
            }, 1000);
        };
        countdown();
    }
    function updateUsersInfo()
    {
        var ul = document.getElementById(usersDiv);
        var html = '';
        var tmp = [];
        for (var i = 0; i < users.length; i++)
        {
            html += '<table style="border: solid;">';
            html += '<tr><td style="text-align: center; padding: 2px;">' + users[i][0] + '</td></tr>';
            html += '<tr><td style="text-align: center; padding: 2px;">Points: ' + users[i][1] + '</td></tr>';
            if (users[i][0] == selectedUser)
            {
                html += '<tr><td style="text-align: center; padding: 2px;"><span class="glyphicon glyphicon-pencil"></span></td></tr>';
            }
            html += '</table>';
        }
        ul.innerHTML = html;
    }
    function compactMode()
    {
        if (compact)
        {
            var previousMsg = document.getElementById(panel).innerHTML;

            timeAndRound = 'timeAndRound';
            timeInfo = 'timeInfo';
            roundInfo = 'roundInfo';
            wordsInfo = 'wordsInfo';
            drawingToolsDiv = 'drawingToolsDiv';
            usersDiv = 'users';
            panelMessages = 'panelMessages';
            panel = 'panel';
            canvasId = 'canvasDiv';
            document.getElementById('well_2').style.display = 'none';
            document.getElementById('well').style.display = 'block';
            if (selectedUser == username)
            {
                document.getElementById(drawingToolsDiv).style.display = 'flex';
            }
            try
            {
                document.getElementById('containerCompactMenu').style.display = 'none';
                document.getElementById('compactMenu').style.display = 'none';
            }catch{}
            
            document.getElementById('cmBtn').innerHTML = 'Compact mode';
            compact = false;
            //var b = $('#body');
            //changeSize($(b).width(), ($(window).height() * 0.9), true);
            changeSize(true);
            document.getElementById('imgLogo').style.display = 'block';

            document.getElementById(panel).innerHTML = previousMsg;
        }
        else
        {
            var previousMsg = document.getElementById(panel).innerHTML;
            
            timeAndRound = 'timeAndRound_2';
            timeInfo = 'timeInfo_2';
            roundInfo = 'roundInfo_2';
            wordsInfo = 'wordsInfo_2';
            drawingToolsDiv = 'drawingToolsDiv_2';
            usersDiv = 'users_2';
            panelMessages = 'panelMessages_2';
            panel = 'panel_2';
            canvasId = 'canvasDiv_2';

            document.getElementById('well_2').style.display = 'block';
            document.getElementById('well').style.display = 'none';
            document.getElementById('cmBtn').innerHTML = 'Normal mode';
            document.getElementById('imgLogo').style.display = 'none';
            compact = true;
            //var b = $('#body');
            //changeSize($(window).width(), ($(window).height() * 0.8), true);
            changeSize(true);
            //expandCompactMenu();
            document.getElementById(panel).innerHTML = previousMsg;
        }
    }
    var expanded = false;
    function expandCompactMenu()
    {
        var cm = document.getElementById('compactMenu');
        if (!expanded)
        {
            cm.style.right = '45%';
            expanded = true;
            document.getElementById('containerCompactMenu').style.display = 'block';
        }
        else
        {
            cm.style.right = '0%';
            expanded = false;
            document.getElementById('containerCompactMenu').style.display = 'none';
        }
    }
    function showDrawingTools()
    {
        document.getElementById(drawingToolsDiv).style.display = 'flex';
        var r = document.getElementById(drawingToolsDiv);
        var html = '';
        drawingTools = [
            {
                'type' : 'pencil', 
                'pos' : [
                    [
                        [
                            [0.7, 0.1], 
                            [0.9, 0.25], 
                            [0.85, 0.3], 
                            [0.65, 0.15], 
                            [0.7, 0.1]
                        ], '#e6e7c5'
                    ], 
                    [
                        [
                            [0.65, 0.15], 
                            [0.23, 0.57], 
                            [0.4, 0.75],  
                            [0.85, 0.3]
                        ], '#000000'
                    ], 
                    [//casi punta
                        [
                            [0.23, 0.57], 
                            [0.189, 0.73], 
                            [0.245, 0.79], 
                            [0.4, 0.75]
                        ], '#e6e7c5'
                    ], 
                    [//punta
                        [
                            [0.189, 0.73], 
                            [0.17, 0.81], 
                            [0.245, 0.79]
                        ], '#000000'
                    ]
                ], 
                'size' : [80, 80]
            }, 
            {
                'type' : 'colour', 
                'colour' : '#000000', 
                'size' : [80, 80]
            }, 
            {
                'type' : 'colour', 
                'colour' : '#0000ff', 
                'size' : [80, 80]
            }, 
            {
                'type' : 'colour', 
                'colour' : '#ff0000', 
                'size' : [80, 80]
            }, 
            {
                'type' : 'colour', 
                'colour' : '#ebff00', 
                'size' : [80, 80]
            }, 
            {
                'type' : 'colour', 
                'colour' : '#00ff00', 
                'size' : [80, 80]
            }, 
            {
                'type' : 'colour', 
                'colour' : '#ffffff', 
                'size' : [80, 80]
            }, 
            {
                'type' : 'colour', 
                'colour' : '#fb43ff', 
                'size' : [80, 80]
            }, 
            {
                'type' : 'colour', 
                'colour' : '#412900', 
                'size' : [80, 80]
            }, 
            {
                'type' : 'colour', 
                'colour' : '#8400ab', 
                'size' : [80, 80]
            }, 
            {
                'type' : 'colour', 
                'colour' : '#ffa800', 
                'size' : [80, 80]
            }, 
            {
                'type' : 'colour', 
                'colour' : '#545454', 
                'size' : [80, 80]
            }, 
            {
                'type' : 'eraser', 
                'pos' : [
                    [
                        [
                            [0.7, 0.1],
                            [0.15, 0.65], 
                            [0.3, 0.85], 
                            [0.85, 0.3],
                            [0.9, 0.25], 
                            [0.7, 0.1]
                        ], '#feabc7'
                    ]/*, 
                    [
                        [
                            [0.85, 0.64],
                            [0.85, 0.2],
                            [0.9, 0.25]
                        ], '#000000'
                    ]*/
                ], 
                'size' : [80, 80]
            }
        ];
        for (var i = 0; i < drawingTools.length; i++)
        {
            /*html += '<table>';
            if (drawingTools[i]['type'] == 'colour')
            {
                html += '<tr><td style="text-align: center; padding: 5px;">' + '<canvas width="' + drawingTools[i]['size'][0] + '" height="' + drawingTools[i]['size'][1] + '" id="canvas_' + drawingTools[i]['type'] + '_' + drawingTools[i]['colour'].split('#')[1] + '">Canvas no soportado.</canvas></td></tr>';
            }
            else
            {
                html += '<tr><td style="text-align: center; padding: 5px;">' + '<canvas width="' + drawingTools[i]['size'][0] + '" height="' + drawingTools[i]['size'][1] + '" id="canvas_' + drawingTools[i]['type'] + '">Canvas no soportado.</canvas></td></tr>';
            }
            html += '</table>';*/
            if (drawingTools[i]['type'] == 'colour')
            {
                html += '<canvas width="' + drawingTools[i]['size'][0] + '" height="' + drawingTools[i]['size'][1] + '" id="canvas_' + drawingTools[i]['type'] + '_' + drawingTools[i]['colour'].split('#')[1] + '" style="padding: 0.2%">Canvas no soportado.</canvas>';
            }
            else
            {
                html += '<canvas width="' + drawingTools[i]['size'][0] + '" height="' + drawingTools[i]['size'][1] + '" id="canvas_' + drawingTools[i]['type'] + '" style="padding: 0.2%">Canvas no soportado.</canvas>';
            }
        }
        r.innerHTML = html;
        for (var i = 0; i < drawingTools.length; i++)
        {
            var canvasTool;
            if (drawingTools[i]['type'] == 'colour')
            {
                canvasTool = document.getElementById('canvas_' + drawingTools[i]['type'] + '_' + drawingTools[i]['colour'].split('#')[1]);
            }
            else
            {
                canvasTool = document.getElementById('canvas_' + drawingTools[i]['type']);
            }
            canvasTool = canvasTool.getContext('2d');
            if (drawingTools[i]['type'] == 'colour')
            {
                canvasTool.fillStyle = drawingTools[i]['colour'];
                canvasTool.beginPath();
                canvasTool.arc((drawingTools[i]['size'][0] / 2), (drawingTools[i]['size'][1] / 2), drawingTools[i]['size'][0] / 2, 0, 2 * Math.PI);
                canvasTool.fill();
                //canvasTool.fill();
                canvasTool = document.getElementById('canvas_' + drawingTools[i]['type'] + '_' + drawingTools[i]['colour'].split('#')[1]);
            }
            else
            {
                canvasTool.fillStyle = '#ffffff';
                //feb0ca
                /*canvasTool.beginPath();
                canvasTool.moveTo(0, 0);
                canvasTool.lineTo(drawingTools[i]['size'][0], 0);
                canvasTool.lineTo(drawingTools[i]['size'][0], drawingTools[i]['size'][1]);
                canvasTool.lineTo(0, drawingTools[i]['size'][1]);
                canvasTool.lineTo(0, 0);*/
                canvasTool.beginPath();
                canvasTool.arc((drawingTools[i]['size'][0] / 2), (drawingTools[i]['size'][1] / 2), drawingTools[i]['size'][0] / 2, 0, 2 * Math.PI);
                canvasTool.fill();
                canvasTool.stroke();
                for (var j = 0; j < drawingTools[i]['pos'].length; j++)
                {
                    if (drawingTools[i]['pos'][j][0].length)
                    {
                        canvasTool.beginPath();
                        canvasTool.moveTo((drawingTools[i]['size'][0] * drawingTools[i]['pos'][j][0][0][0]), (drawingTools[i]['size'][1] * drawingTools[i]['pos'][j][0][0][1]));
                        for (var k = 1; k < drawingTools[i]['pos'][j][0].length; k++)
                        {
                            canvasTool.lineTo((drawingTools[i]['size'][0] * drawingTools[i]['pos'][j][0][k][0]), (drawingTools[i]['size'][1] * drawingTools[i]['pos'][j][0][k][1]));
                        }
                        if (drawingTools[i]['pos'][j][1] != null)
                        {
                            canvasTool.fillStyle = drawingTools[i]['pos'][j][1];
                            canvasTool.fill();
                        }
                        canvasTool.stroke();
                    }
                }
                canvasTool = document.getElementById('canvas_' + drawingTools[i]['type']);
            }
            canvasTool.addEventListener('touchstart', onToolTouch, false);
            canvasTool.addEventListener('mousedown', onToolClic, false);
        }
    }
    function rematch()
    {
        socket.send(JSON.stringify({
            type: 'rematch',
            user: username, 
            roomCode: roomCode
        }));
    }
  </script>
</body>
</html>
